File bintrayProperties = project.rootProject.file('bintray.properties')
if (bintrayProperties.exists()) {
    Properties properties = new Properties()
    properties.load(bintrayProperties.newDataInputStream())

    ext {
        bintrayUsername = properties.bintrayUsername
        bintrayApiKey = properties.bintrayApiKey
    }

    grailsPublish {
        githubSlug = 'noamt/elasticsearch-grails-plugin'
        license {
            name = 'Apache-2.0'
        }
        title = "Elasticserach"
        desc = "An Elasticsearch plugin for Grails"
        developers = [noam: 'Noam Y. Tenne', macrcos: 'Marcos Carceles', puneet: 'Puneet Behl', james: 'James Kleeh']
    }
}

// Publish gh-pages on github
apply plugin: "org.ajoberstar.github-pages"

File githubProperties = project.rootProject.file('github.properties')
if (githubProperties.exists()) {
    Properties properties = new Properties()
    properties.load(githubProperties.newDataInputStream())

    ext {
        githubApiKey = properties.githubApiKey
    }

    githubPages {
        repoUri = 'https://github.com/noamt/elasticsearch-grails-plugin.git'

        credentials {
            username = project.hasProperty('githubApiKey') ? project.githubApiKey : ''
            password = ''
        }

        pages {
            from "${buildDir}/docs"
        }
    }

    task publishDocs(dependsOn: [docs, publishGhPages]) << {
    }
}

// Publish plugin to Artifactory
if (System.getenv('ARTIFACTORY_CONTEXT_URL')) {
    publishing {
        publications {
            mavenJava(MavenPublication) {
                pom.withXml {
                    def pomNode = asNode()
                    pomNode.dependencyManagement.replaceNode {}

                    // simply remove dependencies without a version
                    // version-less dependencies are handled with dependencyManagement
                    // see https://github.com/spring-gradle-plugins/dependency-management-plugin/issues/8 for more complete solutions
                    pomNode.dependencies.dependency.findAll {
                        it.version.text().isEmpty()
                    }.each {
                        it.replaceNode {}
                    }
                }
                from components.java
                def descriptor =
                        artifacts = ["build/libs/${rootProject.name}-${version}.jar", sourcesJar]

            }
        }
    }
    artifactory {
        contextUrl = System.getenv('ARTIFACTORY_CONTEXT_URL')

        publish {
            defaults {
                publications('mavenJava')
                publishArtifacts = true
                publishPom = true

            }
            repository {
                repoKey = "${version.contains('SNAPSHOT') ? (System.getenv('ARTIFACTORY_SNAPSHOT_REPO_KEY') ?: 'plugins-snapshot-local') : (System.getenv('ARTIFACTORY_RELEASE_REPO_KEY') ?: 'plugins-release-local')}"
                username = System.getenv('ARTIFACTORY_USERNAME') ?: 'admin'
                password = System.getenv('ARTIFACTORY_PASSWORD') ?: 'password'
            }
        }
    }
}